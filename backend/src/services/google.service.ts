import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library'
import { GoogleSheetsRow } from '../types';

let disabled = false
if (
  !process.env.GOOGLE_SHEETS_ID             ||
  !process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL ||
  !process.env.GOOGLE_PRIVATE_KEY
) {
  console.error('GOOGLE_SHEETS_ID, GOOGLE_SERVICE_ACCOUNT_EMAIL, GOOGLE_PRIVATE_KEY environment variables not set!')
  console.error('Participations will not be uploaded to Google Sheets')
  disabled = true
}

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY,
  scopes: [
    'https://www.googleapis.com/auth/spreadsheets',
  ],
});

const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEETS_ID || '', serviceAccountAuth);

const initializeSheet = async () => {
  await doc.loadInfo()
  const sheet = doc.sheetsByTitle['talkootunkki']
  if (!sheet) {
    console.error('Error loading sheet, creating a new one')
    try {
      await doc.addSheet({
        title: 'talkootunkki',
        headerValues: [
          'first_name',
          'last_name',
          'username',
          'email',
          'association',
          'start_date',
          'end_date',
          'participation_id'
        ]
      })
    } catch (error) {
      console.error('Error initializing sheet', error)
    }
  }
}

export const uploadParticipationToSheets = async (participation: GoogleSheetsRow) => {
  if (disabled) return
  try {
    // Google sheets does not understand ISO 8601 timestamps
    const start_date = parseTimestamp(participation.start_date)
    const end_date   = parseTimestamp(participation.end_date)
    const rowValues  = {
      ...participation,
      ...(start_date) && { start_date },
      ...(end_date)   && { end_date }
    }

    await initializeSheet()
    const sheet = doc.sheetsByTitle['talkootunkki']
    const rows = await sheet.getRows()
    const row = rows?.find(row => (
      row.get('participation_id') === participation.participation_id)
    )
    if (row) {
      row.assign(rowValues)
      await row.save()
    } else {
      await sheet.addRow(rowValues)
    }
    console.log('Uploaded participation to Google Sheets')
  } catch (error) {
    console.error('Failed to upload participation to Google Sheets', error, participation)
  }
}

const parseTimestamp = (timestamp: number | undefined) => {
  if (timestamp) {
    return new Date(timestamp).getTime()
  } else {
    return undefined
  }
}